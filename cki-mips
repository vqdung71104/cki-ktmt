.eqv SEVENSEG_LEFT    0xFFFF0011 		# Dia chi cua den led 7 doan trai
.eqv SEVENSEG_RIGHT   0xFFFF0010 		# Dia chi cua den led 7 doan phai 
.eqv IN_ADRESS_HEXA_KEYBOARD       0xFFFF0012  
.eqv OUT_ADRESS_HEXA_KEYBOARD      0xFFFF0014	
.eqv KEY_CODE   0xFFFF0004         	# ASCII code from keyboard, 1 byte 
.eqv KEY_READY  0xFFFF0000        	# =1 if has a new keycode ?                                  
			# Auto clear after lw  
  
.eqv COUNTER_TIMER	0xFFFF0013	#Counter Timer's Address
.eqv MASK_CAUSE_COUNTER 0x00000400 	# Bit 10: Counter interrupt
 
.data 
bytedec     : .byte 63,6,91,79,102,109,125,7,127,111 
inputString : .space 1000		#khoang trong de luu cac ky tu nhap tu ban phim.
string: .asciiz "bo mon ky thuat may tinh" 
message1: .asciiz  "\nSo ky tu nhap dung la: "  
message2: .asciiz "\nToc do danh may la: "
message3: .asciiz " ki tu/1s"
message4: .asciiz "\n Continue? "
message5: .ascii "\nThoi gian nhap la: "
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
# MAIN Procedure
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
.text
	li   $k0,  KEY_CODE              #chứa mà ASCII của ký tự nhập từ bàn phím
	li   $k1,  KEY_READY             #là 1 cờ(flag) chỉ báo rằng có dữ liệu từ bàn phím sẵn sàng để đọc        
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 

main:         
	li $s4,0           #$s4: tổng kí tự được nhập                 		
 	li $t4,10	   #$t4=10	 	
	li $t9,0           #$t9 - Boolean: For request loop program or not from user
	li $s5, 0	    #$s5 = 1 if Enter is press
	li $s6, 0           #$s6 lưu thời gian chạy chương trình
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
# Enable Counter (Digital Lab Sim)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
START_COUNTER:
	li $s2, COUNTER_TIMER
	sb $s2, 0($s2)
LOOP:          
WAIT_FOR_KEY:          #kiểm tra xem có 1 phím được nhấn chưa, nếu chưa tiếp tục vòng lặp
 	lw   $t1, 0($k1)              	# $t1 = [$k1] = KEY_READY               
	beq  $t1, $zero, WAIT_FOR_KEY        # if $t1 == 0 then Polling  

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
# 1. Store key in array 'inputString'
# 2. Add 1 for Sum of character from user input
# 3.  Check if Current character is Enter key
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
READ_KEY:
	lw $t0, 0($k0)
	la  $t7,inputString	
	add $t7,$t7,$s4		#trỏ đến ký tự đang cần xét
	sb $t0,0($t7)          #lấy địa chỉ kí tự đó
	addi $s4,$s4,1         #i=i+1, lát trỏ đến kí tự tiếp theo
	beq $t0,10,is_Entered  #KEY_CODE= 10--> kí tự "\n"
	nop
	j LOOP
	

is_Entered: 
	li $s5, 1	#If $t0 is Enter key set $s5 = 1
	b END	#branch to END
	

	       	 
	
END_MAIN:     #exit program
	li $v0,10
	syscall
	
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# INTERUPT COUNTER
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
.ktext    0x80000180         	  
#--------------------------------------------------------
# Temporary disable interrupt
#--------------------------------------------------------
dis_int:  #khi xảy ra ngắt, dis_int sẽ dừng đếm thời gian
	li $s2, COUNTER_TIMER   #bộ đếm thời gian
	sb $zero, 0($s2)
#--------------------------------------------------------
# Processing
#--------------------------------------------------------
get_caus:   #kiểm tra ngắt do bàn phím hay counter
	mfc0  $t8, $13                             #coprocessor
	li    $t2, MASK_CAUSE_COUNTER              # if Cause value confirm Counter..
	and   $at, $t8,$t2     #=0-->ko phải do counter                          
		

end_process: 
	mtc0 $zero, $13 #giá trị 0 vào thanh ghi $13 (Cause register) của Coprocessor 0. 
	                #xóa thông tin về nguyên nhân gây ra ngoại lệ hoặc ngắt.           
check_WaitForKey:	#$t1 = [$k1] = KEY_READY=0 thì chuyển đến en_int
	beq  $t1, $zero, en_int
check_Entered:		#$s5: true if Enter is press, nếu chưa phải "\n" thì đến en_int
	beq $s5, 0, en_int	

#--------------------------------------------------------
# Evaluate the return address of main routine
# epc <= epc + 4
#--------------------------------------------------------
next_pc:   
	mfc0    $at, $14	        # $at <= Coproc0.$14 = Coproc0.epc    
       #Coproc0.epc chứa địa chỉ câu lệnh tiếp theo được thực hiện sau khi xử lí ngắt
	addi    $at, $at, 4	 # $at = $at + 4 (next instruction)              
	mtc0    $at, $14	       	# di chuyển giá trị thanh ghi $at và $14
	                    #--> Coproc0.epc chứa địa chỉ next instrunction

#--------------------------------------------------------
# Re-enable interrupt
#--------------------------------------------------------	
en_int:  #ngắt do thời gian-->khởi tạo lại biến đếm thời gian
	li $s2, COUNTER_TIMER
	sb $s2, 0($s2)
	
SLEEP:  	
        addi $s6, $s6, 5        #cộng thời gian thêm 5s
	addi $v0,$zero,32                   
	li   $a0, 5		 #Sleep 5ms
	syscall         
	nop
#	b      LOOP		#Branch to LOOP   # có thể sử dụng lệnh này để quay lại LOOP, lặp lại quá trình sleep

RETURN:   
	eret                       	# Return from exception
	
END:
Calc_Speed:
	mtc1  $s6, $f1        #nạp giá trị thanh ghi $s6 vào thanh ghi dấu phẩy động $f1($s6 lưu thời gian)
	cvt.s.w $f1, $f1   #chuyển đổi giá trị trong $f1 từ định dạng 32bit sang định dạng dấu phẩy động
	
	mtc1 $t4, $f3    #t4=10, lát lấy $f1/1000
	cvt.s.w $f3, $f3
	
	mtc1 $s4, $f2              #$s4: tổng kí tự được nhập
	cvt.s.w $f2, $f2
	
	div.s $f1, $f1, $f3   #$f1=$f1/$f3
	div.s $f1, $f1, $f3
	div.s $f1, $f1, $f3
	#sau 3 lần chia, $f1/=1000
	div.s $f2, $f2, $f1    #$f2=$f2/$f1 (số ký tự/1s)
	
	li $v0,11         
	li $a0,'\n'         	
	syscall          #in ra "/n"
	li $t1,0 		#đếm tổng số kí tự được so sánh
	li $t3,0                      	#đếm tổng số kí tự đúng
	li $t8,24		#độ dài inputstring
	slt $t7,$s4,$t8		#so sánh độ dài chuỗi ban đầu và chuỗi người dùng nhập
	bne $t7,1, CHECK_STRING	#chuỗi ban đầu >=chuỗi nhập vào-->CHECK_STRING
	add $t8,$zero, $s4     #Gán độ dài chuỗi của người dùng vào $t8
	addi $t8,$t8,-1		#bỏ qua kí tự "\n" ở cuối chuỗi
	beq $t8, 0, Print      #chuỗi chỉ có 1 kí tự--> Print
CHECK_STRING:			
	la $t2,inputString
	add $t2,$t2,$t1        #cộng giá trị $t1 được dùng như chỉ số vào $t2
	li $v0,11		#chuẩn bị sử dụng hệ thống gọi 11(đọc kí tự)
	lb $t5,0($t2)	        #đọc kí tự tại $t2 vào $t5
	move $a0,$t5
	syscall 		#in ra string người dùng nhập
	
	la $t4,string
	add $t4,$t4,$t1        #trỏ đến vị trí $t1 tại chuỗi nguồn
	lb $t6,0($t4)		#lấy ký tự tại vị trí $t1 trong chuỗi nguồn và lưu vào thanh ghi $t6.
	bne $t6, $t5,CONTINUE	#kí tự tại chuỗi nguồn khác chuỗi người dùng nhập-->CONTINUE
	addi $t3,$t3,1         #$t3=tổng số kí tự đúng 
CONTINUE: 
	addi $t1,$t1,1		#chuyển đến kí tự tiếp theo
	beq $t1,$t8,Print	#so sánh xong chuỗi-->Print
	j CHECK_STRING		#nếu chưa so sánh xong quay lại CHECK-STRING
Print:	
	li $v0,4
	la $a0,message1
	syscall
	li $v0,1
	add $a0,$0,$t3     #số kí tự đúng
	syscall
	
	li $v0,4
	la $a0,message5
	syscall
	li $v0, 2
	mov.s $f12, $f1         #$f1= thời gian chạy
	syscall
	
	li $v0,4
	la $a0,message2
	syscall
	li $v0, 2
	mov.s $f12, $f2         #$f2 = tốc độ đánh máy (tổng kí tự được nhập/1s)
	syscall
	li $v0,4
	la $a0,message3
	syscall
	
	li $t9,1
	li $t6,0		
	li $t4,10		# set $t4 = 10
	li $s6, 0
	add $t6,$0,$t3		#$t6: số kí tự đúng
	   
	
DISPLAY_DIGITAL: #show số kí tự đúng lên led 7, bên trái chỉ số hàng chục, bên phải là hàng đơn vị
	div $t6,$t4		#$t6: số kí tự đúng
	mflo $t7		#$t7 = $t6 div $t4-->in phần hàng chục
	la $s2,bytedec		#convert to decimal 
	add $s2,$s2,$t7		#trỏ đến vị trí tương ứng trong mảng bytedec
	lb $a0,0($s2)                 	        
	jal   SHOW_7SEG_LEFT       	# show on left LED
#------------------------------------------------------------------------
	mfhi $t7		#$t7 = $t6 mod $t4-->in phần đơn vị
	la $s2,bytedec			
	add $s2,$s2,$t7
	lb $a0,0($s2)                	    
	jal  SHOW_7SEG_RIGHT      	# show on right LED 
#------------------------------------------------------------------------                                            
	li    $t6,0		# Set $t6 to 0 for rerun program
	beq $t9,1,RequestForLoop
	
RequestForLoop: 
	li $v0, 50
	la $a0, message4
	syscall   #hộp thoại quay lại chương trình
	beq $a0,0,main	#nếu chọn yes thì quay lại main
	nop	
	b EXIT
    
SHOW_7SEG_LEFT:  
	li   $t0,  SEVENSEG_LEFT 	# assign port's address                   
	sb   $a0,  0($t0)        	# assign new value                    
	jr   $ra 
	
SHOW_7SEG_RIGHT: 
	li   $t0,  SEVENSEG_RIGHT 	# assign port's address                  
	sb   $a0,  0($t0)         	# assign new value                   
	jr   $ra 

EXIT: 
